package com.redhat.management.approval;

import java.util.Base64;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.io.Serializable;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.apache.commons.lang3.StringUtils;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class EmailBody implements Serializable {

    static final long serialVersionUID = 1L;
    private static String templateFile = "EmailTemplate.html";

    private Approver approver;
    private Group group;
    private Request request;

    public String getEmailTemplate() {
        URL url = EmailBody.class.getResource(templateFile);

        String content = "";
        try {
            content = getUrlContent(url);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return content;
    }

    public Map<String, String> getRequestParameters() {
        Map<String, Object> request_content = getContent();

        Map<String, String> values = new HashMap<String, String>();
        values.put("approver_name", approver.getFirstName() + " " + approver.getLastName());
        values.put("requester_name", getIdentityFullName());
        values.put("orderer_email", getIdentityEmail());
        values.put("contents", getRequestContentLines(request_content));

        String webUrl = System.getenv("APPROVAL_WEB_URL");
        try {
            String perUserUrl = request.getRandomAccessKey() + ";" + approver.getUserName();
            String approveLink = webUrl + "/api/approval/v1.0/stageaction/" + encrypt(perUserUrl);
            values.put("approve_link", approveLink);

            String orderLink = webUrl + "/ansible/catalog/approval/requests/detail/" + getApprovalId();
            values.put("order_link", orderLink);
        }
        catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        try {
            String date = ApprovalApiHelper.formatDate("dd MMM yyyy", getCreatedTime());
            String time = ApprovalApiHelper.formatDate("HH:mm:ss", getCreatedTime());
            values.put("order_date", date);
            values.put("order_time", time);
        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        HashMap<String, Object> params = (HashMap<String, Object>) request_content.get("params");

        System.out.println("request content params: " + params);
        values.put("params", getParamsTable(params));
        values.put("approval_id", getApprovalId());

        return values;
    }

    public String customizeKey(String key) {
        return StringUtils.capitalize(key.replace("_", " ").replaceAll("(?i)id", "ID"));
    }

    public Approver getApprover() {
        return this.approver;
    }

    public void setApprover(Approver approver) {
        this.approver = approver;
    }

    public Group getGroup() {
        return this.group;
    }

    public void setGroup(Group group) {
        this.group = group;
    }

    public Request getRequest() {
        return this.request;
    }

    public void setRequest(Request request) {
        this.request = request;
    }

    public EmailBody(Approver approver, Group group, Request request) {
        this.approver = approver;
        this.group = group;
        this.request = request;
    }

    public String toString() {
        String template = getEmailTemplate();
        Map<String, String> values = getRequestParameters();

        StrSubstitutor sub = new StrSubstitutor(values);
        return sub.replace(template);
    }
    
    public Map<String, Object> getContent() {
        return request.getContent();
    }
    
    public String getIdentityFullName() {
        return  request.getIdentityFullName().toString();
    }
    
    public String getIdentityEmail() {
        return  request.getIdentityEmail();
    }

    public String getApprovalId() {
        return  request.getParentId();
    }
    
    public String getCreatedTime() {
        return  request.getCreatedTime();
    }
    
    private static String getUrlContent(URL url) throws Exception {
        URLConnection connection = url.openConnection();
        BufferedReader in = new BufferedReader(
                              new InputStreamReader(
                                connection.getInputStream()));

        StringBuilder content = new StringBuilder();
        String inputLine;

        try {
            while ((inputLine = in.readLine()) != null) 
                content.append(inputLine);
        }
        finally {
            in.close();
        }

        return content.toString();
    }

    private String encrypt(String strToEncrypt) throws Exception {
        String v2Key = System.getenv("ENCRYPTION_KEY");
        if(v2Key == null) {
            v2Key = "5ysYUd3Qrjj7DDplmEJHmnrFBEPS887JwOQv0jFYq2g=";
        }
        byte[] keyBytes = Base64.getDecoder().decode(v2Key);
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, "AES");

        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        IvParameterSpec ivpec = new IvParameterSpec(iv);

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivpec);

        String output = Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        output = output.replace("\n", "");

        return URLEncoder.encode("v2:{" + output + "}", "UTF-8");
    }

    private String getRequestContentLines(Map<String, Object> contents) {
        StringBuilder lines = new StringBuilder();
        for (HashMap.Entry<String, Object> entry : contents.entrySet()) {
            if (entry.getKey().equals("params"))
                continue;
  
            String line = "<strong>" + customizeKey(entry.getKey()) + ":</strong>" + entry.getValue().toString() + "<br>";
            lines.append(line);
        }
        System.out.println("Request content: "+ lines);
        return lines.toString();
    }

    private String getParamsTable(HashMap<String, Object> params) {
        StringBuilder paramsTable = new StringBuilder(
                "<table><tbody><tr><td><strong>Key</strong></td><td><strong>Value<strong></td></tr>\n");
        
        for (HashMap.Entry<String, Object> entry: params.entrySet()) {
            String param = "<tr><td>" + entry.getKey() + "</td><td>" + entry.getValue().toString() + "</td></tr>\n";
            paramsTable.append(param);
        };
        paramsTable.append("</tbody></table>");
        return paramsTable.toString();
    }

}
